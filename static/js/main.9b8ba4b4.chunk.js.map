{"version":3,"sources":["components/Header.jsx","components/BugListViewHeader.jsx","backend/dbBugRequests.js","components/BugListView.jsx","backend/dbUserRequests.js","components/Login.jsx","components/Register.jsx","components/Dashboard.jsx","components/SelectUser.jsx","components/CreateBug.jsx","components/EditBug.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","props","isAuthenticated","id","to","style","textDecoration","className","marginTop","onClick","setIsAuthenticated","type","sortDirection","previousSortColumnName","BugListViewHeader","bugListViewKeys","Object","keys","headerInfo","filter","key","includes","map","index","setBugList","sortColumnName","dataType","bugList","newSort","sort","a","b","comparison","toLowerCase","sortStringColumn","sortNumberColumn","sortColumn","toUpperCase","deleteBugs","idList","cb","require","request","method","url","form","err","httpResponse","body","console","log","response","JSON","parse","BugListView","useState","bugsToDelete","setBugsToDelete","toggleCheckbox","e","target","name","checked","el","deleteCallback","onChange","masterCheckbox","checkAllItems","length","bug","bugTitle","bugCreatedDate","bugAssignedTo","bugDueDate","bugStatus","bugSeverity","bugReproducableFrequency","bugAssignedToName","userList","user","firstName","lastName","SQL","join","dbBugs","value","Login","loginError","setLoginError","handleInput","setUserLoginData","userLoginData","htmlFor","email","autoFocus","pwd","userData","callBackResponse","async","result","Table","dbUser","data","Register","setUserData","register","phone","affectedRows","db","oldState","onInput","placeholder","Dashboard","callBack","useEffect","Promise","resolve","reject","list","setUserList","generateUserList","SelectUser","setUser","CreateBug","bugDescription","bugCreatedBy","newBug","setNewBug","message","messageType","show","submitMessage","setSubmitMessage","callback","onSubmit","preventDefault","EditBug","useParams","updateCallback","updateBug","App","authenticated","exact","path","newList","users","newData","newState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9b8ba4b4.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n// import menuHamburger from '../img/menu-hamburger.png'\r\n\r\nimport './Header.css';\r\n// import '../img/menu-hamburger.png'\r\nexport default function Header(props) {\r\n    return (\r\n        <header>\r\n            {props.isAuthenticated\r\n                ? <div id=\"headerMenu\">\r\n                    {/* <Link to=\"/register\"><input id=\"registerButton\" className=\"button\" type=\"button\" value=\"Register\"></input></Link> */}\r\n                    <Link to=\"/\" style={{ textDecoration: 'none' }}><div className=\"headerItem\">Dashboard</div></Link>\r\n                    <Link to=\"/createBug\" style={{ textDecoration: 'none' }}><div className=\"headerItem\">Create Bug</div></Link>\r\n                    <i className=\"fa fa-cog\" style={{marginTop:'5px'}}></i>\r\n                    <Link to=\"/\" style={{ textDecoration: 'none' }}><div className=\"headerItem\"><span onClick={()=>props.setIsAuthenticated(false)} type=\"text\" >Logout</span></div></Link>\r\n                </div>\r\n                : null}\r\n        </header>\r\n\r\n    );\r\n}","// https://stackoverflow.com/questions/4647817/javascript-object-rename-key\r\nimport React from 'react';\r\n\r\nimport './BugListView.css'\r\n\r\nlet sortDirection = true;\r\nlet previousSortColumnName = '';\r\n\r\nexport default function BugListViewHeader(props) {\r\n    // console.log(\"in bugHeader\", props.headerInfo);\r\n\r\n    // function renameKeys(obj, newKeys) {\r\n    //     const keyValues = Object.keys(obj).map(key => {\r\n    //         const newKey = newKeys[key] || key;\r\n    //         return { [newKey]: obj[key] };\r\n    //     });\r\n    //     return Object.assign({}, ...keyValues);\r\n    // }\r\n\r\n\r\n    const bugListViewKeys = ['id', 'bugTitle', 'bugCreatedDate', 'bugAssignedTo', 'bugDueDate', 'bugStatus', 'bugSeverity', 'bugReproducableFrequency'];\r\n    // TODO update header names, but retain sort option with real key names\r\n    // const bugListViewKeysToDisplay = ['id', 'title', 'createdDate', 'assigned to', 'due', 'status', 'severity', 'reproducable'];\r\n    // debugger;\r\n    let allKeys = Object.keys(props.headerInfo);\r\n    let keysToShow = allKeys.filter( key => bugListViewKeys.includes(key));\r\n    keysToShow = bugListViewKeys;\r\n\r\n    // const newKeyNames = { bugTitle: \"title\", bugCreatedDate: \"created\"};\r\n    // keysToShow = renameKeys(keysToShow, newKeyNames);\r\n\r\n    // create initial sort based on first key in list\r\n    // useEffect( () => {\r\n    //     props.setBugList(sortColumn (props, bugListViewKeys[0]));\r\n    // },[]);\r\n\r\n    \r\n    return (\r\n        keysToShow.map( (key, index) => {\r\n            return <th onClick={() => { props.setBugList( sortColumn(props, key) ); } } \r\n                key={index}>\r\n                {key.toUpperCase()}\r\n            </th>\r\n        })\r\n    )\r\n}\r\n\r\nfunction sortStringColumn (a, b, sortColumnName) {\r\n    let comparison = 0;\r\n    if (a[sortColumnName].toLowerCase() > b[sortColumnName].toLowerCase()) {\r\n        comparison = (sortDirection) ? 1 : -1;\r\n    } else if (a[sortColumnName].toLowerCase() < b[sortColumnName].toLowerCase()) {\r\n        comparison = (sortDirection) ? -1 : 1;\r\n    }\r\n    return comparison;\r\n}\r\n\r\nfunction sortNumberColumn (a, b, sortColumnName) {\r\n    let comparison = 0;\r\n    if (a[sortColumnName] > b[sortColumnName]) {\r\n        comparison = (sortDirection) ? 1 : -1;\r\n    } else if (a[sortColumnName] < b[sortColumnName]) {\r\n        comparison = (sortDirection) ? -1 : 1;\r\n    }\r\n    return comparison;\r\n}\r\n\r\nfunction sortColumn (props, sortColumnName) {\r\n    if (previousSortColumnName === sortColumnName) {\r\n        sortDirection = !sortDirection;\r\n    } else {\r\n        sortDirection = true;\r\n        previousSortColumnName = sortColumnName;\r\n    }\r\n\r\n    const dataType = typeof props.bugList[0][sortColumnName];\r\n    let newSort = [...props.bugList];\r\n\r\n    switch (dataType) {\r\n        case 'string':\r\n            newSort.sort( (a, b) => sortStringColumn (a, b, sortColumnName));\r\n            break;\r\n        case 'number':\r\n            newSort.sort( (a, b) => sortNumberColumn (a, b, sortColumnName));\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return newSort;\r\n}","function submitBug(data, cb) {\r\n  var request = require('request');\r\n\r\n  console.log(\"submitting request\");\r\n  console.log(data);\r\n\r\n  const {\r\n    bugTitle,\r\n    bugDescription,\r\n    bugCreatedDate,\r\n    bugCreatedBy,\r\n    bugAssignedTo,\r\n    bugDueDate,\r\n    bugStatus,\r\n    bugSeverity,\r\n    bugReproducableFrequency\r\n  } = data;\r\n\r\n  request({\r\n    method: 'POST',\r\n    url: 'https://bigbug-365ff5.appdrag.site/api/bugs/submitBug',\r\n    form: {\r\n      \"bugTitle\": bugTitle,\r\n      \"bugDescription\": bugDescription,\r\n      \"bugCreatedDate\": bugCreatedDate,\r\n      \"bugCreatedBy\": bugCreatedBy,\r\n      \"bugAssignedTo\": bugAssignedTo,\r\n      \"bugDueDate\": bugDueDate,\r\n      \"bugStatus\": bugStatus,\r\n      \"bugSeverity\": bugSeverity,\r\n      \"bugReproducableFrequency\": bugReproducableFrequency\r\n    }\r\n  }, function (err, httpResponse, body) {\r\n    let result = JSON.parse(body).affectedRows;\r\n    cb(result);\r\n  });\r\n}\r\n\r\nasync function getAllBugs(cb) {\r\n  var request = require('request');\r\n\r\n  request({\r\n    method: 'POST',\r\n    url: 'https://bigbug-365ff5.appdrag.site/api/bugs/getAllBugs',\r\n    form: {\r\n      \"AD_PageNbr\": \"1\",\r\n      \"AD_PageSize\": \"500\"\r\n    }\r\n  }, function (err, httpResponse, body) {\r\n    let result = JSON.parse(body);\r\n    // console.log(result);\r\n    cb(result.Table);\r\n  });\r\n}\r\n\r\nfunction getBug(id, cb) {\r\n  var request = require('request');\r\n\r\n  request({\r\n    method: 'POST',\r\n    url: 'https://bigbug-365ff5.appdrag.site/api/bugs/getBug',\r\n    form: {\r\n      \"id\": id,\r\n      \"AD_PageNbr\": \"1\",\r\n      \"AD_PageSize\": \"500\"\r\n    }\r\n  }, function (err, httpResponse, body) {\r\n    console.log(body);\r\n    let response = JSON.parse(body);\r\n    cb(response.Table[0]);\r\n  });\r\n}\r\n\r\nfunction updateBug(bug, cb) {\r\n  var request = require('request');\r\n\r\n  request({\r\n    method: 'POST',\r\n    url: 'https://bigbug-365ff5.appdrag.site/api/bugs/updateBug',\r\n    form: {\r\n      \"id\": bug.id,\r\n      \"bugTitle\": bug.bugTitle,\r\n      \"bugDescription\": bug.bugDescription,\r\n      \"bugCreatedDate\": bug.bugCreatedDate,\r\n      \"bugCreatedBy\": bug.bugCreatedBy,\r\n      \"bugAssignedTo\": bug.bugAssignedTo,\r\n      \"bugDueDate\": bug.bugDueDate,\r\n      \"bugStatus\": bug.bugStatus,\r\n      \"bugSeverity\": bug.bugSeverity,\r\n      \"bugReproducableFrequency\": bug.bugReproducableFrequency\r\n    }\r\n  }, function (err, httpResponse, body) {\r\n    console.log(body);\r\n    let response = JSON.parse(body);\r\n    cb(response.affectedRows);\r\n  });\r\n}\r\n\r\nfunction deleteBugs(idList, cb) {\r\n  var request = require('request');\r\n\r\n  request({\r\n    method: 'POST',\r\n    url: 'https://bigbug-365ff5.appdrag.site/api/bugs/deleteBugs',\r\n    form: {\r\n      \"idList\": idList // \"(id = 5) OR (id = 2)\"\r\n    }\r\n  }, function (err, httpResponse, body) {\r\n    console.log(body);\r\n    let response = JSON.parse(body);\r\n    cb(response);\r\n  });\r\n}\r\n\r\nexport {\r\n  submitBug,\r\n  getAllBugs,\r\n  getBug,\r\n  updateBug,\r\n  deleteBugs\r\n};","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport BugListViewHeader from './BugListViewHeader';\r\nimport * as dbBugs from '../backend/dbBugRequests';\r\n\r\nimport './BugListView.css'\r\n\r\nexport default function BugListView(props) {\r\n    const [bugsToDelete, setBugsToDelete] = useState([]);\r\n\r\n    const toggleCheckbox = e => {\r\n        const { name, checked } = e.target; // destructuring\r\n        if (checked) {\r\n            setBugsToDelete([...bugsToDelete, name])\r\n        } else {\r\n            setBugsToDelete(bugsToDelete.filter(el => el !== name));\r\n        };\r\n    }\r\n\r\n    const toggleAllCheckBoxes = e => {\r\n        const { checked : masterCheckbox } = e.target;\r\n        console.log(\"master checkbox = \" + masterCheckbox);\r\n        if (masterCheckbox) {\r\n            let checkAllItems =props.bugList.map ( el => `(id=${el.id})`);\r\n            setBugsToDelete(checkAllItems);\r\n            \r\n        } else {\r\n            setBugsToDelete([]);\r\n        }\r\n    }\r\n\r\n    const deleteCallback = response => {\r\n        console.log(response);\r\n    }\r\n\r\n    const deleteBugs = () => {\r\n        let SQL = bugsToDelete.join(' OR ');\r\n        console.log(SQL);\r\n        dbBugs.deleteBugs(SQL, deleteCallback);\r\n    }\r\n\r\n    function listBugs() {\r\n\r\n        return props.bugList.map(bug => {\r\n            const {\r\n                id,\r\n                bugTitle,\r\n                // bugDescription,\r\n                bugCreatedDate,\r\n                // bugCreatedBy,\r\n                bugAssignedTo,\r\n                bugDueDate,\r\n                bugStatus,\r\n                bugSeverity,\r\n                bugReproducableFrequency\r\n            } = bug; //destructuring\r\n            // let bugAssignedToName = props.userList.filter( user => user.id !== bugAssignedTo);\r\n            let bugAssignedToName = props.userList.filter( user => user.id == bugAssignedTo);\r\n            console.log(\"list to match = \" + bugAssignedTo);\r\n            if (bugAssignedTo > 0) { console.log(bugAssignedToName[0].firstName + \" \" + bugAssignedToName[0].lastName); }\r\n            if (bugAssignedTo > 0) { bugAssignedToName = (bugAssignedToName[0].firstName + \" \" + bugAssignedToName[0].lastName); }\r\n            // debugger;\r\n\r\n            return (\r\n                <tr key={id}>\r\n                    <td><input className=\"bug_list_view_item bug_list_view_check_box\" type=\"checkbox\" name={`(id=${id})`} onChange={toggleCheckbox} checked={bugsToDelete.includes(`(id=${id})`)}></input></td>\r\n                    <td className=\"bug_list_view_item bug_list_view_bug_id\"><Link to={`/bug/${id}`}>{id}</Link></td>\r\n                    <td className=\"bug_list_view_item bug_list_view_bug_title\"><Link to={`/bug/${id}`}>{bugTitle}</Link></td>\r\n                    {/* <td className = \"bug_list_view_item bug_list_view_bug_description\">{bugDescription}</td> */}\r\n                    <td className=\"bug_list_view_item bug_list_view_bug_createdDate\"><Link to={`/bug/${id}`}>{bugCreatedDate}</Link></td>\r\n                    {/* <td className = \"bug_list_view_item bug_list_view_bug_createdBy\">{bugCreatedBy}</td> */}\r\n                    <td className=\"bug_list_view_item bug_list_view_bug_assignedTo\"><Link to={`/bug/${id}`}>{bugAssignedToName}</Link></td>\r\n                    <td className=\"bug_list_view_item bug_list_view_bug_dueDate\"><Link to={`/bug/${id}`}>{bugDueDate}</Link></td>\r\n                    <td className=\"bug_list_view_item bug_list_view_bug_status\"><Link to={`/bug/${id}`}>{bugStatus}</Link></td>\r\n                    <td className=\"bug_list_view_item bug_list_view_bug_severity\"><Link to={`/bug/${id}`}>{bugSeverity}</Link></td>\r\n                    <td className=\"bug_list_view_item bug_list_view_bug_reproducibleFrequency\"><Link to={`/bug/${id}`}>{bugReproducableFrequency}</Link></td>\r\n                </tr>\r\n            )\r\n        }\r\n        );\r\n    }\r\n    return (\r\n        <div>\r\n            <table id=\"bug_list_view_table\">\r\n                <thead>\r\n                    <tr key={0}>\r\n                        <th><input className=\"bug_list_view_item bug_list_view_check_box\" type=\"checkbox\" name=\"mainCheckAll\" onChange={toggleAllCheckBoxes} checked={bugsToDelete.length === props.bugList.length}></input></th>\r\n                        <BugListViewHeader\r\n                            headerInfo={props.bugList[0]}\r\n                            bugList={props.bugList}\r\n                            setBugList={props.setBugList}\r\n                        />\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {listBugs()}\r\n                </tbody>\r\n            </table>\r\n            {bugsToDelete.length > 0 && <div><input onClick={deleteBugs} type=\"button\" value=\"DELETE\"></input></div>}\r\n        </div>\r\n    );\r\n}","async function checkLoginInfo(userData, callBackResponse) {\r\n    var request = require('request');\r\n    const {\r\n        email = '', pwd = ''\r\n    } = userData;\r\n    console.log(`email ${email} ${pwd}`);\r\n\r\n    request({\r\n        method: 'POST',\r\n        url: 'https://bigbug-365ff5.appdrag.site/api/users/login',\r\n        form: {\r\n            \"email\": email,\r\n            \"pwd\": pwd,\r\n            \"AD_PageNbr\": \"1\",\r\n            \"AD_PageSize\": \"500\"\r\n        }\r\n    }, function (err, httpResponse, body) {\r\n        let result = JSON.parse(body);\r\n        if (result.Table.length !== 0) {\r\n            console.log(\"Welcome \" + result.Table[0].firstName);\r\n            callBackResponse(result.Table[0]);\r\n        } else {\r\n            console.log(\"No data returned\");\r\n            callBackResponse(-1);\r\n        }\r\n    });\r\n}\r\n\r\nasync function register(userData, callBackResponse) {\r\n    var request = require('request');\r\n\r\n    request({\r\n        method: 'POST',\r\n        url: 'https://bigbug-365ff5.appdrag.site/api/users/register',\r\n        form: {\r\n            \"firstName\": userData.firstName,\r\n            \"lastName\": userData.lastName,\r\n            \"email\": userData.email,\r\n            \"pwd\": userData.pwd,\r\n            \"phone\": userData.phone\r\n        }\r\n    }, function (err, httpResponse, body) {\r\n        console.log(body);\r\n        let result = JSON.parse(body);\r\n        callBackResponse(result.affectedRows);\r\n    });\r\n}\r\n\r\nvar request = require('request');\r\n\r\nfunction getUsersCB() {\r\n    return new Promise(function (resolve, reject) {\r\n        request({\r\n            method: 'POST',\r\n            url: 'https://bigbug-365ff5.appdrag.site/api/users/getUsers',\r\n            form: {\r\n                \"AD_PageNbr\": \"1\",\r\n                \"AD_PageSize\": \"500\"\r\n            }\r\n        }, function (err, httpResponse, body) {\r\n            if (err != null) {\r\n                resolve(err);\r\n            } else {\r\n                let result = JSON.parse(body).Table;\r\n                resolve(result);\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n// async function getHello(cb) {\r\n//     var request = require('request');\r\n//     // console.log(\"in getHello\");\r\n\r\n//     request({\r\n//         method: 'POST',\r\n//         url: 'https://bigbug-365ff5.appdrag.site/api/hash-bcrypt',\r\n//         form: {\r\n//             \"hash\": \"12345\"\r\n//         }\r\n//     }, function (err, httpResponse, body) {\r\n//         let result = JSON.parse(body);\r\n//         // console.log(result.payload);\r\n//         cb(result.payload);\r\n//     });\r\n// }\r\n\r\nexport {\r\n    // getHello,\r\n    checkLoginInfo,\r\n    register,\r\n    getUsersCB\r\n}","// https://stackoverflow.com/questions/36683770/how-to-get-the-value-of-an-input-field-using-reactjs\r\n\r\nimport React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport * as dbUser from \"../backend/dbUserRequests.js\";\r\n\r\nimport './Login.css'\r\n\r\n\r\nexport default function Login(props) {\r\n    const [loginError, setLoginError] = useState(false);\r\n\r\n    function allowLogin() {\r\n        return props.userLoginData.email.length > 0 && props.userLoginData.pwd.length > 0;\r\n    }\r\n\r\n    function login() {\r\n        console.log(\"login request\");\r\n        let callBackResponse = data => {\r\n            console.log(\"Data received from CallBack = \", data);\r\n            // debugger;\r\n            props.setUserLoginData({ email: \"\", pwd: \"\" });\r\n            if (data === -1) {\r\n                setLoginError(true);\r\n            } else {\r\n                setLoginError(false);\r\n                props.setIsAuthenticated (true);\r\n            }\r\n        }\r\n        dbUser.checkLoginInfo(props.userLoginData, callBackResponse);\r\n    }\r\n\r\n    function handleInput(target) {\r\n        const { name, value } = target;\r\n        props.setUserLoginData({ ...props.userLoginData, [name]: value });\r\n    }\r\n\r\n    return (\r\n        <div id=\"login\">\r\n            <div id=\"loginContainer\">\r\n                {loginError && <div className=\"error bold-font\">Incorrect login. Please check your details and try again.</div>}\r\n                <div>\r\n                    <label htmlFor=\"loginEmail\">Email:</label>\r\n                    <input\r\n                        onChange={e => handleInput(e.target)} id=\"loginEmail\" type=\"text\" name=\"email\" value={props.userLoginData.email} autoFocus></input>\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"loginPassword\">Password:</label>\r\n                    <input onChange={e => handleInput(e.target)} id=\"loginPassword\" type=\"password\" name=\"pwd\" value={props.userLoginData.pwd}></input>\r\n                </div>\r\n                { allowLogin()\r\n                ? <input id=\"loginButton\" className=\"button\" onClick={login} type=\"button\" value=\"Login\"></input>\r\n                : <input id=\"loginDisabled\" className=\"button\" type=\"button\" value=\"Login\"></input>\r\n                }\r\n                \r\n                <Link to=\"/register\"><input id=\"registerButton\" className=\"button\" type=\"button\" value=\"Register\"></input></Link>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport * as db from '../backend/dbUserRequests.js';\r\n\r\nimport './Register.css';\r\n\r\nexport default function Register(props) {\r\n    const [userData, setUserData] = useState(\"\");\r\n    function register(e) {\r\n        console.log(\"register request\", e);\r\n        console.log(userData);\r\n        let callBackResponse = data => {\r\n            console.log(\"Data received from CallBack = \", data);\r\n        }\r\n        db.register(userData, callBackResponse);\r\n    }\r\n\r\n    const handleInput = e => {\r\n        const { name, value } = e.target;\r\n        // console.log (`name ${name} value ${value}`);\r\n        setUserData(oldState => ({ ...oldState, [name]: value }))\r\n    }\r\n\r\n    return (\r\n        <div id=\"register\">\r\n            <div id=\"registerContainer\">\r\n                <div className=\"flex-even\">\r\n                    <input className=\"btn\" onInput={handleInput} name=\"firstName\" type=\"text\" placeholder=\"First Name\"></input>\r\n                    <input className=\"btn\" onInput={handleInput} name=\"lastName\" type=\"text\" placeholder=\"Last Name\"></input>\r\n                </div>\r\n                <div className=\"flex-even\">\r\n                    <input className=\"btn\" onInput={handleInput} name=\"email\" type=\"email\" placeholder=\"Email\"></input>\r\n                    <input className=\"btn\" onInput={handleInput} name=\"pwd\" type=\"password\" placeholder=\"Password\"></input>\r\n                </div>\r\n                <div className=\"flex-even\">\r\n                    <span></span>\r\n                    <input className=\"btn\" onInput={handleInput} name=\"pwdConfirm\" type=\"password\" placeholder=\"Confirm Password\"></input>\r\n                </div>\r\n                <input className=\"btn\" onInput={handleInput} name=\"phone\" type=\"text\" placeholder=\"Phone\"></input>\r\n                <div className=\"flex-even\">\r\n                    <Link to=\"/\"><input className=\"btn\" type=\"button\" value=\"Back\"></input></Link>\r\n                    <input className=\"btn\" onClick={() => register()} type=\"button\" value=\"Create Account\"></input>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport * as dbBugs from '../backend/dbBugRequests.js';\r\nimport * as dbUsers from '../backend/dbUserRequests';\r\nimport BugListView from './BugListView.jsx';\r\n\r\nexport default function Dashboard(props) {\r\n\r\n    // console.log(\"in Dashboard\");\r\n    // const callBack = bugList => {console.log(bugList); props.setBugList(bugList);}\r\n    const callBack = bugList => {props.setBugList(bugList);}\r\n\r\n    const generateUserList = async () => {\r\n        let list = await dbUsers.getUsersCB();\r\n        console.log (list);\r\n        props.setUserList(list);\r\n    }\r\n    \r\n    useEffect ( () => {\r\n        dbBugs.getAllBugs(callBack);\r\n        // console.log (\"call to getAllBugs\");\r\n        generateUserList();\r\n    },[]);\r\n\r\n    return (\r\n                <div>\r\n                    <BugListView bugList={props.bugList} setBugList={ props.setBugList } userList={props.userList} />\r\n                </div>\r\n           \r\n    )\r\n}","//https://medium.com/@andrewmyint/infinite-loop-inside-useeffect-react-hooks-6748de62871\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport * as dbUsers from '../backend/dbUserRequests';\r\n\r\nexport default function SelectUser(props) {\r\n    const [user, setUser] = useState(props.user);\r\n    console.log (\"SelectUser user = \" + props.user);\r\n    // const [userList, setUserList] = useState([]);\r\n\r\n    // useEffect( () => {\r\n    //     generateUserList();\r\n    // }, []);\r\n\r\n    // const generateUserList = async () => {\r\n    //     let list = await dbUsers.getUsersCB();\r\n    //     console.log (list);\r\n    //     setUserList(list);\r\n    // }\r\n\r\n    function showList() {\r\n        return props.userList.map (el => <option key={el.id} value={el.id}>{el.firstName} {el.lastName}</option>)\r\n    }\r\n\r\n    const handleChange = e => {\r\n        console.log (e.target.value);\r\n        setUser(e.target.value);\r\n        props.onChange(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <select value={props.user} onChange={handleChange}>\r\n            {/* need to add UNASSIGNED */}\r\n            {showList()}\r\n        </select>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport SelectUser from './SelectUser';\r\nimport * as db from '../backend/dbBugRequests';\r\n\r\nimport './CreateBug.css';\r\n\r\nexport default function CreateBug(props) {\r\n\r\n    function resetBugFields() {\r\n        return (\r\n            {\r\n                bugTitle: \"\",\r\n                bugDescription: \"\",\r\n                bugCreatedDate: \"\",\r\n                bugCreatedBy: \"\",\r\n                bugAssignedTo: \"\",\r\n                bugDueDate: \"\",\r\n                bugStatus: \"\",\r\n                bugSeverity: \"\",\r\n                bugReproducableFrequency: \"\"\r\n            }\r\n        );\r\n    }\r\n    const [newBug, setNewBug] = useState(resetBugFields());\r\n    const [submitMessage, setSubmitMessage] = useState({ message: \"Enter New Bug Details\", messageType: \"success\", show: true });\r\n\r\n    const handleInput = e => {\r\n        const { name, value } = e.target; // destructuring\r\n        setNewBug({ ...newBug, [name]: value });\r\n    }\r\n\r\n    const callback = result => {\r\n        if (result === '1') {\r\n            // show success message\r\n            setSubmitMessage({ message: \"New bug successfully entered.\", messageType: \"success\", show: true });\r\n            setNewBug(resetBugFields());\r\n        } else {\r\n            setSubmitMessage({ message: `Error creating bug. (${result})`, messageType: \"failure\", show: true });\r\n        }\r\n    }\r\n\r\n    const submitBug = e => {\r\n        e.preventDefault();\r\n        db.submitBug(newBug, callback);\r\n    }\r\n\r\n    return (\r\n        <div id=\"CreateBugForm\">\r\n            {submitMessage.show && <h1>{submitMessage.message}</h1>}\r\n            <form onSubmit={submitBug}>\r\n                <div>\r\n                    <label htmlFor=\"bugTitle\">Title:</label>\r\n                    <input onChange={handleInput} type=\"text\" id=\"bugTitle\" name=\"bugTitle\" value={newBug.bugTitle}></input>\r\n                </div>\r\n                <div>\r\n                    <div><label htmlFor=\"bugDescription\">Description:</label></div>\r\n                    <textarea onChange={handleInput} id=\"bugDescription\" name=\"bugDescription\" value={newBug.bugDescription}></textarea>\r\n                </div>\r\n                <div className=\"flex\">\r\n                    <div>\r\n                        <label htmlFor=\"bugCreatedDate\">Creation Date:</label>\r\n                        <input onChange={handleInput} type=\"text\" id=\"bugCreatedDate\" name=\"bugCreatedDate\" value={newBug.bugCreatedDate}></input>\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor=\"bugCreatedBy\">Created By:</label>\r\n                        <input onChange={handleInput} type=\"text\" id=\"bugCreatedBy\" name=\"bugCreatedBy\" value={newBug.bugCreatedBy}></input>\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor=\"bugAssignedTo\">Assigned To:</label>\r\n                        {/* <input onChange={handleInput} type=\"text\" id=\"bugAssignedTo\" name=\"bugAssignedTo\" value={newBug.bugAssignedTo}></input> */}\r\n                        <SelectUser onChange={ user => setNewBug( {...newBug, bugAssignedTo:user})} userList={props.userList} />\r\n                    </div>\r\n                    {/* <div>\r\n                        <label htmlFor=\"bugAssignedTo\">Assigned To:</label>\r\n                        <input onChange={handleInput} type=\"text\" id=\"bugAssignedTo\" name=\"bugAssignedTo\" value={newBug.bugAssignedTo}></input>\r\n                    </div> */}\r\n                    <div>\r\n                        <label htmlFor=\"bugDueDate\">Due Date:</label>\r\n                        <input onChange={handleInput} type=\"text\" id=\"bugDueDate\" name=\"bugDueDate\" value={newBug.bugDueDate}></input>\r\n                    </div>\r\n                </div>\r\n                <label htmlFor=\"bugStatus\">Status:</label>\r\n                <input onChange={handleInput} type=\"text\" id=\"bugStatus\" name=\"bugStatus\" value={newBug.bugStatus}></input>\r\n                <label htmlFor=\"bugSeverity\">Severity:</label>\r\n                <input onChange={handleInput} type=\"text\" id=\"bugSeverity\" name=\"bugSeverity\" value={newBug.bugSeverity}></input>\r\n                <label htmlFor=\"bugReproducableFrequency\">Reproducable Frequency:</label>\r\n                <input onChange={handleInput} type=\"text\" id=\"bugReproducableFrequency\" name=\"bugReproducableFrequency\" value={newBug.bugReproducableFrequency}></input>\r\n                <div className=\"flex-right\">\r\n                    <Link to=\"/\">\r\n                        <input className=\"btn\" type=\"button\" value=\"Cancel\" />\r\n                    </Link>\r\n                    <input className=\"btn\" type=\"submit\" value=\"Submit New Bug\"></input>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport SelectUser from './SelectUser';\r\nimport * as dbBugs from '../backend/dbBugRequests';\r\n\r\nexport default function EditBug(props) {\r\n    function resetBugFields() {\r\n        return (\r\n            {\r\n                id: \"\",\r\n                bugTitle: \"\",\r\n                bugDescription: \"\",\r\n                bugCreatedDate: \"\",\r\n                bugCreatedBy: \"\",\r\n                bugAssignedTo: \"\",\r\n                bugDueDate: \"\",\r\n                bugStatus: \"\",\r\n                bugSeverity: \"\",\r\n                bugReproducableFrequency: \"\"\r\n            }\r\n        );\r\n    }\r\n\r\n    const [submitMessage, setSubmitMessage] = useState({ message: \"Edit Bug Details\", messageType: \"success\", show: true });\r\n    const [newBug, setNewBug] = useState(resetBugFields());\r\n    // const [newBug, setNewBug] = useState(resetBugFields());\r\n\r\n    let { id } = useParams();\r\n    // debugger;\r\n\r\n    const callback = response => {\r\n        console.log(response);\r\n        setNewBug({\r\n            id: response.id,\r\n            bugTitle: response.bugTitle,\r\n            bugDescription: response.bugDescription,\r\n            bugCreatedDate: response.bugCreatedDate,\r\n            bugCreatedBy: response.bugCreatedBy,\r\n            bugAssignedTo: response.bugAssignedTo,\r\n            bugDueDate: response.bugDueDate,\r\n            bugStatus: response.bugStatus,\r\n            bugSeverity: response.bugSeverity,\r\n            bugReproducableFrequency: response.bugReproducableFrequency\r\n        });\r\n    }\r\n    if (newBug.id === '') { dbBugs.getBug(id, callback); }\r\n\r\n    console.log (\"EditBug user = \" + newBug.bugAssignedTo);\r\n\r\n    const handleInput = e => {\r\n        const { name, value } = e.target; // destructuring\r\n        setNewBug({ ...newBug, [name]: value });\r\n    }\r\n\r\n    const updateCallback = response => {\r\n        console.log(\"update callback: \" + response);\r\n    }\r\n\r\n    const updateBug = () => {\r\n        dbBugs.updateBug(newBug, updateCallback);\r\n    }\r\n\r\n    const deleteCallback = response => {\r\n        console.log(response);\r\n    }\r\n\r\n    const deleteBug = () => {\r\n        let SQL = `(id = ${id})`;\r\n        console.log(`SQL = ${SQL}`);\r\n        dbBugs.deleteBugs(SQL, deleteCallback);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div id=\"CreateBugForm\">\r\n                {submitMessage.show && <h1>{submitMessage.message}</h1>}\r\n                <form onSubmit={updateBug}>\r\n                    <div>\r\n                        <label htmlFor=\"bugTitle\">Title:</label>\r\n                        <input onChange={handleInput} type=\"text\" id=\"bugTitle\" name=\"bugTitle\" value={newBug.bugTitle}></input>\r\n                    </div>\r\n                    <div>\r\n                        <div><label htmlFor=\"bugDescription\">Description:</label></div>\r\n                        <textarea onChange={handleInput} id=\"bugDescription\" name=\"bugDescription\" value={newBug.bugDescription}></textarea>\r\n                    </div>\r\n                    <div className=\"flex\">\r\n                        <div>\r\n                            <label htmlFor=\"bugCreatedDate\">Creation Date:</label>\r\n                            <input onChange={handleInput} type=\"text\" id=\"bugCreatedDate\" name=\"bugCreatedDate\" value={newBug.bugCreatedDate}></input>\r\n                        </div>\r\n                        <div>\r\n                            <label htmlFor=\"bugCreatedBy\">Created By:</label>\r\n                            <input onChange={handleInput} type=\"text\" id=\"bugCreatedBy\" name=\"bugCreatedBy\" value={newBug.bugCreatedBy}></input>\r\n                        </div>\r\n                        <div>\r\n                            <label htmlFor=\"bugAssignedTo\">Assigned To:</label>\r\n                            <SelectUser onChange={user => setNewBug({ ...newBug, bugAssignedTo: user })} userList={props.userList} user={newBug.bugAssignedTo}/>\r\n                            {/* <input onChange={handleInput} type=\"text\" id=\"bugAssignedTo\" name=\"bugAssignedTo\" value={newBug.bugAssignedTo}></input> */}\r\n                        </div>\r\n                        <div>\r\n                            <label htmlFor=\"bugDueDate\">Due Date:</label>\r\n                            <input onChange={handleInput} type=\"text\" id=\"bugDueDate\" name=\"bugDueDate\" value={newBug.bugDueDate}></input>\r\n                        </div>\r\n                    </div>\r\n                    <label htmlFor=\"bugStatus\">Status:</label>\r\n                    <input onChange={handleInput} type=\"text\" id=\"bugStatus\" name=\"bugStatus\" value={newBug.bugStatus}></input>\r\n                    <label htmlFor=\"bugSeverity\">Severity:</label>\r\n                    <input onChange={handleInput} type=\"text\" id=\"bugSeverity\" name=\"bugSeverity\" value={newBug.bugSeverity}></input>\r\n                    <label htmlFor=\"bugReproducableFrequency\">Reproducable Frequency:</label>\r\n                    <input onChange={handleInput} type=\"text\" id=\"bugReproducableFrequency\" name=\"bugReproducableFrequency\" value={newBug.bugReproducableFrequency}></input>\r\n                    <div className=\"flex-right\">\r\n                        <Link to=\"/\">\r\n                            <input className=\"btn\" type=\"button\" value=\"Cancel\" />\r\n                        </Link>\r\n                        <Link to=\"/\">\r\n                            <input onClick={deleteBug} className=\"btn\" type=\"button\" value=\"Delete\" />\r\n                        </Link>\r\n                        <Link to=\"/\">\r\n                            <input onClick={updateBug} className=\"btn\" type=\"button\" value=\"Update Bug\"></input>\r\n                        </Link>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}","// https://dev.to/abdulbasit313/an-easy-way-to-create-a-customize-dynamic-table-in-react-js-3igg\r\n// https://www.youtube.com/watch?v=ri5Nqe_IK50\r\n// https://medium.com/allenhwkim/mobile-friendly-table-b0cb066dbc0e\r\n\r\nimport React, { useState } from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\"\r\nimport Header from './components/Header';\r\nimport Sidebar from './components/Sidebar';\r\nimport BugListView from './components/BugListView';\r\nimport Login from './components/Login';\r\nimport Register from './components/Register';\r\nimport Dashboard from './components/Dashboard';\r\nimport CreateBug from './components/CreateBug';\r\nimport EditBug from './components/EditBug';\r\n\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  \r\n  // const [ user, setUser ] = useState(\"Bob\");\r\n  const [userLoginData, setUserLoginData] = useState({ email: \"\", pwd: \"\" });\r\n  const [isAuthenticated, setIsAuthenticated] = useState(true);\r\n  const [ bugList, setBugList ] = useState([{id:''}]);  // default id to prevent \"unique key prop\" error\r\n  const [userList, setUserList] = useState([]);\r\n\r\n  return (\r\n    <div id=\"app\">\r\n      <Router>\r\n      <Header isAuthenticated={isAuthenticated} setIsAuthenticated={ authenticated => setIsAuthenticated(authenticated)}/>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            { isAuthenticated\r\n            // ? <CreateBug bugList={bugList} setBugList ={ newList => setBugList(newList)}/>\r\n            ? <Dashboard bugList={bugList} setBugList= { newList => setBugList(newList)} userList={userList} setUserList={ users => setUserList(users) }/>\r\n            : <Login userLoginData={userLoginData} setUserLoginData={ newData => {setUserLoginData(newData)}} setIsAuthenticated={ newState => setIsAuthenticated(newState)} />\r\n            }\r\n\r\n          </Route>\r\n          <Route path=\"/register\">\r\n            <Register />\r\n          </Route>\r\n          <Route path=\"/createBug\">\r\n            <CreateBug userList={userList}/>\r\n          </Route>\r\n          <Route path=\"/bug/:id\">\r\n            {/* <Sidebar /> */}\r\n            <EditBug userList={userList}/>\r\n            {/* <BugListView bugList={bugList} setBugList ={ newList => setBugList(newList)}/> */}\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}